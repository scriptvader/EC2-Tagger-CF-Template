AWSTemplateFormatVersion: 2010-09-09
Description: Automatically add tags to newly spun EC2 instances
Parameters:
  DeploymentName:
    Type: String
    Description: This name would apply to resources in this template.
  Keys:
    Type: String
    Description: Comma separated list of tag keys (Could be one or more)
    AllowedPattern: '^\w+(,\w+)*$'
  Values:
    Type: String
    Description: >-
      Comma separated list of tag keys (IMPORTANT! - must be same size and desired order as keys list)
    AllowedPattern: '^\w+(,\w+)*$'
Resources:
  IamRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Join
      - ''
      - - !Ref DeploymentName
        - '-role-'
        - !Ref 'AWS::Region'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - 'sts:AssumeRole'
      Policies:
      - PolicyName: !Join
        - ''
        - - !Ref DeploymentName
          - '-policy-'
          - !Ref 'AWS::Region'
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Sid: VisualEditor0
            Effect: Allow
            Action: 'ec2:DescribeTags'
            Resource: '*'
          - Sid: VisualEditor1
            Effect: Allow
            Action:
            - 'ec2:CreateTags'
            - 'logs:CreateLogGroup'
            Resource:
            - !Join
              - ''
              - - 'arn:aws:logs:'
                - !Ref 'AWS::Region'
                - ':'
                - !Ref 'AWS::AccountId'
                - ':*'
            - !Join
              - ''
              - - 'arn:aws:ec2:'
                - !Ref 'AWS::Region'
                - ':'
                - !Ref 'AWS::AccountId'
                - ':instance/*'
          - Sid: VisualEditor2
            Effect: Allow
            Action:
            - 'logs:CreateLogStream'
            - 'logs:PutLogEvents'
            Resource: !Join
            - ''
            - - 'arn:aws:logs:'
              - !Ref 'AWS::Region'
              - ':'
              - !Ref 'AWS::AccountId'
              - ':log-group:/aws/lambda/'
              - !Ref DeploymentName
              - '-function:*'
  LambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Environment:
        Variables:
          Param1: !Ref Keys
          Param2: !Ref Values
      Code:
        ZipFile: |
          import os
          import boto3

          def lambda_handler(event, context):
              try:
                #Retrieve keys and values into a list
                key_list = os.environ['Keys'].split(',')
                value_list = os.environ['Values'].split(',')
                no_of_tags = len(key_list)

                ec2 = boto3.client('ec2')
                #Get instance id from event
                instance_id = event['detail']['responseElements']['instancesSet']['items'][0]['instanceId']

                #Get the tags of the launched instance
                instance_tags = ec2.describe_tags(Filters=[{'Name': 'resource-id', 'Values': [instance_id] }])

                #Check if tag already exists
                secure_tag_found = False

                for i in range (0, no_of_tags):
                key = key_list[i]
                value = value_list[i]
                  try:
                    #Check if tag already exists (optional)
                    for tag in instance_tags['Tags']:
                        if tag['Key'] == key and tag['Value'] == value:
                            secure_tag_found = True
                            break

                    if not secure_tag_found:
                        ec2.create_tags(
                            Resources = [instance_id],
                              Tags = [
                                    {
                                    'Key': key,
                                    'Value': value
                                    }
                                ]
                        )
                  except Exception as e:
                      print(f"Failed to add tags. Error: {str(e)}\n")
              except Exception as e:
                print(f"Operation failed. Error: {str(e)}\n")
      FunctionName: !Join
      - ''
      - - !Ref DeploymentName
        - '-function'
      Description: Lambda function that tags all newly created instances
      Handler: index.lambda_handler
      Role: !GetAtt
      - IamRole
      - Arn
      Runtime: python3.9
  EventBridgeRule:
    Type: 'AWS::Events::Rule'
    Properties:
      Description: >-
        EventBridge rule that triggers the function. This rule detects EC2 instance launch
      Name: !Join
      - ''
      - - !Ref DeploymentName
        - '-event'
      EventPattern:
        source:
        - aws.ec2
        detail-type:
        - AWS API Call via CloudTrail
        detail:
          eventSource:
          - ec2.amazonaws.com
          eventName:
          - RunInstances
      State: ENABLED
      Targets:
      - Arn: !GetAtt
        - LambdaFunction
        - Arn
        Id: MyLambdaFunctionTrigger
  LambdaPermissionvmgt:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt
      - LambdaFunction
      - Arn
      Principal: events.amazonaws.com
      SourceArn: !GetAtt
      - EventBridgeRule
      - Arn
  Outputs:
    LambdaFunctionArn:
      Description: The ARN of the Lambda function
      Value: !GetAtt
      - LambdaFunction
      - Arn
    IamRoleArn:
      Description: The ARN of the IAM Role
      Value: !GetAtt
      - IamRole
      - Arn
    EventBridgeRuleArn:
      Description: The ARN of the EventBridge Rule
      Value: !GetAtt
      - EventBridgeRule
      - Arn
